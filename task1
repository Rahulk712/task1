task #1

for taking db backup we can also run this script using ansible and as well as cronjob so it will automatically run according to our setted timings and server.

#!/bin/bash
DATE=$(date +%b_%d_%Y)
BACKUP_DIR=/root/Downloads/test_DB_${DATE}
mkdir -p $BACKUP_DIR

USER="root"
PASSWORD="password"
OUTPUT="$BACKUP_DIR/test_DBs"
mkdir -p $BACKUP_DIR/test_DBs
databases=`mysql -u $USER -p$PASSWORD -e "SHOW DATABASES;" | tr -d "| " | grep -v Database`
for db in $databases; do
    if [[ "$db" != "information_schema" ]] && [[ "$db" != "performance_schema" ]] && [[ "$db" != "mysql" ]] && [[ "$db" != _* ]] ; then
        echo "Dumping database: $db"
        mysqldump --routines -u $USER -p$PASSWORD --databases $db | gzip -9 > "$OUTPUT/`date +%d_%b_%Y`.$db.sql.gz"
    fi
done

sshpass -p "password" scp -r $BACKUP_DIR/test_DBs root@<backup-server-ip>:/root/Downloads/test_DB_${DATE}

rm -rf $BACKUP_DIR

Inventories : This will hold the list of ip-address or domain name mapped to servers that we want to work with ansible
## simply adding servers to inventories
server1.com
server2.com


#run this backup shell  script using ansible
- name: Transfer and execute a script.
  hosts: all
  tasks:

     - name: script is runnig  
       script: /home/user/backupScript.sh
